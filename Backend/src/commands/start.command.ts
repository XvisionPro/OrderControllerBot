import { Markup, Telegraf } from "telegraf";
import { Command } from "./command.class";
import { IBotContext } from "../context/context.interface";
import { dealKeyboard, backKeyboard } from "../components/keyboards";
/* TODO:
1. –†–∞–∑–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ —Ñ–∞–π–ª–∞–º
2. –°–¥–µ–ª–∞—Ç—å –ø–æ–¥–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î
3. –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≥–¥–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∞–π–¥–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã —Ç—É–¥–∞ –µ–º—É –æ—Ç—Å—Ç—É–∫ –ø—Ä–∏—Ö–æ–¥–∏–ª, –∞ —Ç–æ —â–∞—Å —ç—Ç–æ —Å—Ç–∞—Ç–∏–∫–∞ */

export class StartCommand extends Command {
    constructor(bot: Telegraf<IBotContext>) {
        super(bot);
    }
    handle(): void {

        // –ö–Ω–æ–ø–∫–∞ /start
        this.bot.start(async (ctx) => {
            ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevOrderBot!`);
            await new Promise((resolve) => setTimeout(resolve,   500));
        
            const keyboard = Markup.keyboard([
                ['–ü—Ä–æ—Ñ–∏–ª—å üë§'],
                ['–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤']
            ]).resize();
        
            // Debug version
            // ctx.reply(`–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? ${ctx.message.chat.id}`,keyboard);
            ctx.reply(`–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?`,keyboard);
        });
        
        // –ï—Å–ª–∏ —è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–º–Ω—é —É –Ω–∞—Å –≤ –ë–î –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –æ—Ç—Ç—É–¥–∞ –Ω–∞–¥–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å
        this.bot.hears("–ü—Ä–æ—Ñ–∏–ª—å üë§", (ctx) => {
            this.bot.telegram.sendMessage(ctx.message.chat.id, 
                `–ò–º—è: ${ctx.message.from.first_name}\n` +
                `id: ${ctx.message.from.id}\n` +
                `–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${Math.random()}`);
        });

        this.bot.hears("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", (ctx) => {
            ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', dealKeyboard());
        });

        // –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
        this.bot.action('search', (ctx) => {
            ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)', backKeyboard(false));
        })

        this.bot.action('back', (ctx) => {
            ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', dealKeyboard());
        })

        // –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î –∏ –ø–µ—Ä–µ–¥–∞—á—É username –≤ –æ—Ç—Å—Ç—É–∫
        this.bot.action('order', (ctx) => {

            ctx.editMessageText("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –í–∞—à –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥–∏!\n–°–∫–æ—Ä–æ –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!", backKeyboard(false))
            ctx.telegram.sendMessage(5084751842, `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!`)
        })

        // handler –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        this.bot.action(/^deal_(\d+)$/, (ctx) => {
            const dealNumber = parseInt(ctx.match[1]);
        
            const messageText = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ ‚Ññ${dealNumber}`;
        
            ctx.editMessageText(messageText, backKeyboard(true));
        });

    }
}