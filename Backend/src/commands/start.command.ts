import { Markup, Telegraf } from "telegraf";
import { Command } from "./command.class";
import { IBotContext } from "../context/context.interface";

/* TODO:
1. –†–∞–∑–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ —Ñ–∞–π–ª–∞–º
2. –°–¥–µ–ª–∞—Ç—å –ø–æ–¥–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î
3. –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≥–¥–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∞–π–¥–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã —Ç—É–¥–∞ –µ–º—É –æ—Ç—Å—Ç—É–∫ –ø—Ä–∏—Ö–æ–¥–∏–ª, –∞ —Ç–æ —â–∞—Å —ç—Ç–æ —Å—Ç–∞—Ç–∏–∫–∞ */

export class StartCommand extends Command {
    constructor(bot: Telegraf<IBotContext>) {
        super(bot);
    }
    handle(): void {

        // –ö–Ω–æ–ø–∫–∞ /start
        this.bot.start(async (ctx) => {
            ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevOrderBot!`);
            await new Promise((resolve) => setTimeout(resolve,   500));
        
            const keyboard = Markup.keyboard([
                ['–ü—Ä–æ—Ñ–∏–ª—å üë§'],
                ['–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤']
            ]).resize();
        
            // Debug version
            // ctx.reply(`–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? ${ctx.message.chat.id}`,keyboard);
            ctx.reply(`–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?`,keyboard);
        });

    }
}