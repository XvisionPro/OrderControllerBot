import { Markup, Telegraf } from "telegraf";
import { Command } from "./command.class";
import { IBotContext } from "../context/context.interface";
import { DataBase } from "../Database";

export class StartCommand extends Command {
    private db: DataBase;

    constructor(bot: Telegraf<IBotContext>) {
        super(bot);
        this.db = new DataBase();;
    }

    async handle(): Promise<void> {
        
        this.bot.start(async (ctx) => {
            const user = ctx.from;
            const telegramId = user?.id;
            const firstName = user?.first_name ?? ''; 
            const lastName = user?.last_name ?? '';
            const username = user?.username ?? '';

            if (!telegramId) {
                ctx.reply("Could not retrieve your Telegram ID.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            let existingUser = await this.db.getUserFromDb(telegramId);

            if (!existingUser) {
                // –°–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await this.db.insertNewUser(telegramId, firstName, lastName, username);
                existingUser = { id: telegramId, firstName, lastName, username };
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await this.db.updateUser(telegramId, firstName, lastName, username);
            }

            ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevOrderBot, ${existingUser.first_name}!`);
            await new Promise((resolve) => setTimeout(resolve,  500));

            const keyboard = Markup.keyboard([
                ['–ü—Ä–æ—Ñ–∏–ª—å üë§'],
                ['–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'],
                ['–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤']
            ]).resize();

            ctx.reply(`–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?`, keyboard);
        });
    }
}